{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adf-estudos-leo"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/pl_copy_data_com_paralelismo_manual')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "alternativa para o dynamic range, quando o banco nao oferece suporte ao dynamic range, essa estrategia é interessante para cargas historicas",
				"activities": [
					{
						"name": "getCategories",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT distinct productCategoryId FROM SalesLT.Product",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sqldb_estudos_leo",
								"type": "DatasetReference",
								"parameters": {
									"schema": " ",
									"tbName": " "
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ingestionParalell",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "getCategories",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('getCategories').output.value",
								"type": "Expression"
							},
							"batchCount": 4,
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "SELECT * FROM SalesLT.Product WHERE productCategoryId = @{item().productCategoryId}",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_sqldb_estudos_leo",
											"type": "DatasetReference",
											"parameters": {
												"schema": " ",
												"tbName": " "
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_adls_parquet",
											"type": "DatasetReference",
											"parameters": {
												"container": "bronze",
												"path": "SalesLT/Product_paralelismo_manual",
												"fileName": {
													"value": "file_category_@{item().productCategoryId}.parquet",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"annotations": [],
				"lastPublishTime": "2021-08-31T14:37:48Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_copy_data_com_paralelismo_manual_com_gravacao_log')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "alternativa para o dynamic range, quando o banco nao oferece suporte ao dynamic range, essa estrategia é interessante para cargas historicas",
				"activities": [
					{
						"name": "getCategories",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT distinct productCategoryId FROM SalesLT.Product",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sqldb_estudos_leo",
								"type": "DatasetReference",
								"parameters": {
									"schema": " ",
									"tbName": " "
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ingestionParalell",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "getCategories",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('getCategories').output.value",
								"type": "Expression"
							},
							"batchCount": 4,
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "SELECT * FROM SalesLT.Product WHERE productCategoryId = @{item().productCategoryId}",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_sqldb_estudos_leo",
											"type": "DatasetReference",
											"parameters": {
												"schema": " ",
												"tbName": " "
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_adls_parquet",
											"type": "DatasetReference",
											"parameters": {
												"container": "bronze",
												"path": "SalesLT/Product_paralelismo_manual",
												"fileName": {
													"value": "file_category_@{item().productCategoryId}.parquet",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "Exception",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ingestionParalell",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_parameters",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"fileName": " "
							}
						}
					},
					{
						"name": "GravarLog",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ingestionParalell",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_parameters",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"fileName": " "
							}
						}
					}
				],
				"annotations": [],
				"lastPublishTime": "2021-08-31T14:37:48Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_ingest_tb_products')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "set_current_date",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "current_date",
							"value": {
								"value": "@utcnow('yyyyMMdd')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ingest_product_branch",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "set_current_date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "ProductID",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "ProductID",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "Name",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Name",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "ProductNumber",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "ProductNumber",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Color",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Color",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "StandardCost",
											"type": "Decimal",
											"physicalType": "money",
											"scale": 4,
											"precision": 19
										},
										"sink": {
											"name": "StandardCost",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										}
									},
									{
										"source": {
											"name": "ListPrice",
											"type": "Decimal",
											"physicalType": "money",
											"scale": 4,
											"precision": 19
										},
										"sink": {
											"name": "ListPrice",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										}
									},
									{
										"source": {
											"name": "Size",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Size",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Weight",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 2,
											"precision": 8
										},
										"sink": {
											"name": "Weight",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										}
									},
									{
										"source": {
											"name": "ProductCategoryID",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "ProductCategoryID",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "ProductModelID",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "ProductModelID",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "SellStartDate",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "SellStartDate",
											"type": "DateTime",
											"physicalType": "INT_96"
										}
									},
									{
										"source": {
											"name": "SellEndDate",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "SellEndDate",
											"type": "DateTime",
											"physicalType": "INT_96"
										}
									},
									{
										"source": {
											"name": "DiscontinuedDate",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "DiscontinuedDate",
											"type": "DateTime",
											"physicalType": "INT_96"
										}
									},
									{
										"source": {
											"name": "ThumbNailPhoto",
											"type": "Byte[]",
											"physicalType": "varbinary"
										},
										"sink": {
											"name": "ThumbNailPhoto",
											"type": "Byte[]",
											"physicalType": "BINARY"
										}
									},
									{
										"source": {
											"name": "ThumbnailPhotoFileName",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "ThumbnailPhotoFileName",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "rowguid",
											"type": "Guid",
											"physicalType": "uniqueidentifier"
										},
										"sink": {
											"name": "rowguid",
											"type": "Guid",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "ModifiedDate",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "ModifiedDate",
											"type": "DateTime",
											"physicalType": "INT_96"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_sqldb_estudos_leo",
								"type": "DatasetReference",
								"parameters": {
									"schema": "SalesLT",
									"tbName": "Product"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_adls_parquet",
								"type": "DatasetReference",
								"parameters": {
									"container": "bronze",
									"path": {
										"value": "SalesLT/Product/@{variables('current_date')}",
										"type": "Expression"
									},
									"fileName": "file.parquet"
								}
							}
						]
					}
				],
				"variables": {
					"current_date": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-08-25T16:38:59Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_ingest_tb_salesorderdetail')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "get_maxRecentDateTime",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT max(mostRecentDateTime) as mostRecentDateTime FROM controller.water_mark\nWHERE tableName = 'SalesLT.SalesOrderDetail'\n\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sqldb_estudos_leo",
								"type": "DatasetReference",
								"parameters": {
									"schema": "controller",
									"tbName": "water_mark"
								}
							}
						}
					},
					{
						"name": "if_water_mark_isnull",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "get_maxRecentDateTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@empty(activity('get_maxRecentDateTime').output.firstRow.mostRecentDateTime)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "set_water_mark",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "water_mark",
										"value": {
											"value": "@activity('get_maxRecentDateTime').output.firstRow.mostRecentDateTime",
											"type": "Expression"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Set variable1",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "water_mark",
										"value": {
											"value": "1900-01-01",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "lk_hasRows_to_water_mark",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "if_water_mark_isnull",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT count(*) as hasRows FROM SalesLT.SalesOrderDetail\nWHERE  ModifiedDate > '@{variables('water_mark')}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sqldb_estudos_leo",
								"type": "DatasetReference",
								"parameters": {
									"schema": "SalesLT",
									"tbName": "SalesOrderDetail"
								}
							}
						}
					},
					{
						"name": "if_has_rows_to_water_mark",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "lk_hasRows_to_water_mark",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('lk_hasRows_to_water_mark').output.firstRow.hasRows,0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ingest_data",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "SELECT * FROM SalesLT.SalesOrderDetail\nWHERE ModifiedDate > '@{variables('water_mark')}'",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "SalesOrderID",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "SalesOrderID",
														"type": "Int32",
														"physicalType": "INT_32"
													}
												},
												{
													"source": {
														"name": "SalesOrderDetailID",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "SalesOrderDetailID",
														"type": "Int32",
														"physicalType": "INT_32"
													}
												},
												{
													"source": {
														"name": "OrderQty",
														"type": "Int16",
														"physicalType": "smallint"
													},
													"sink": {
														"name": "OrderQty",
														"type": "Int16",
														"physicalType": "INT_32"
													}
												},
												{
													"source": {
														"name": "ProductID",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "ProductID",
														"type": "Int32",
														"physicalType": "INT_32"
													}
												},
												{
													"source": {
														"name": "UnitPrice",
														"type": "Decimal",
														"physicalType": "money",
														"scale": 4,
														"precision": 19
													},
													"sink": {
														"name": "UnitPrice",
														"type": "Decimal",
														"physicalType": "DECIMAL"
													}
												},
												{
													"source": {
														"name": "UnitPriceDiscount",
														"type": "Decimal",
														"physicalType": "money",
														"scale": 4,
														"precision": 19
													},
													"sink": {
														"name": "UnitPriceDiscount",
														"type": "Decimal",
														"physicalType": "DECIMAL"
													}
												},
												{
													"source": {
														"name": "LineTotal",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 6,
														"precision": 38
													},
													"sink": {
														"name": "LineTotal",
														"type": "Decimal",
														"physicalType": "DECIMAL"
													}
												},
												{
													"source": {
														"name": "rowguid",
														"type": "Guid",
														"physicalType": "uniqueidentifier"
													},
													"sink": {
														"name": "rowguid",
														"type": "Guid",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "ModifiedDate",
														"type": "DateTime",
														"physicalType": "datetime"
													},
													"sink": {
														"name": "ModifiedDate",
														"type": "DateTime",
														"physicalType": "INT_96"
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_sqldb_estudos_leo",
											"type": "DatasetReference",
											"parameters": {
												"schema": "SalesLT",
												"tbName": "SalesOrderDetail"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_adls_parquet",
											"type": "DatasetReference",
											"parameters": {
												"container": "bronze",
												"path": {
													"value": "SalesLT/SalesOrderDetail/@{utcnow('yyyyMMdd')}",
													"type": "Expression"
												},
												"fileName": {
													"value": "file-@{variables('water_mark')}.parquet",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "if_has_rowsread",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "if_has_rows_to_water_mark",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('ingest_data').output.rowsRead,0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "lkp_max_modifiedDate",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "SELECT max(ModifiedDate) as mostRecentDateTime\nFROM  SalesLT.SalesOrderDetail",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "ds_sqldb_estudos_leo",
											"type": "DatasetReference",
											"parameters": {
												"schema": "SalesLT",
												"tbName": "SalesOrderDetail"
											}
										}
									}
								},
								{
									"name": "sp_update_water_mark",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "lkp_max_modifiedDate",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[controller].[update_water_mark]",
										"storedProcedureParameters": {
											"mostRecentDateTime": {
												"value": {
													"value": "@activity('lkp_max_modifiedDate').output.firstRow.mostRecentDateTime",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"tableName": {
												"value": "SalesLT.SalesOrderDetail",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ls_sql_db_estudos_leo",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"variables": {
					"water_mark": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-08-25T20:45:46Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_transform_product_dataflow')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "transform_product",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_transform_product",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"readBronzeProduct": {
										"container": "bronze",
										"path": "SalesLT/Product/20210825",
										"fileName": "file.parquet"
									},
									"WriteProductSilver": {
										"container": "silver",
										"path": "SalesLT/Product_Dataflow"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"annotations": [],
				"lastPublishTime": "2021-08-30T20:42:35Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/trg_ingest_product')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pl_copy_data_com_paralelismo_dinamico",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Minute",
						"interval": 1,
						"startTime": "2021-09-01T16:10:00",
						"timeZone": "E. South America Standard Time"
					}
				}
			},
			"dependsOn": []
		}
	]
}